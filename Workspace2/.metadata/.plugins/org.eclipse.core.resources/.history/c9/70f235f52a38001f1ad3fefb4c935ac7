package Mypackage;

import java.util.Scanner;

public class RecursiveAndNonRecursive {

    // Non-recursive (iterative) function to compute factorial
    public static long factorialIterative(int n) {
        long result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    // Recursive function to compute factorial
    public static long factorialRecursive(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return n * factorialRecursive(n - 1);
    }

    // Non-recursive (iterative) function to compute the nth Fibonacci number
    public static long fibonacciIterative(int n) {
        if (n <= 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        }
        long fib1 = 0, fib2 = 1, fib = 1;
        for (int i = 2; i <= n; i++) {
            fib = fib1 + fib2;
            fib1 = fib2;
            fib2 = fib;
        }
        return fib;
    }

    // Recursive function to compute the nth Fibonacci number
    public static long fibonacciRecursive(int n) {
        if (n <= 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        }
        return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Factorial computation
        System.out.print("Enter a number to compute its factorial: ");
        int number = scanner.nextInt();
        
        System.out.println("Factorial (Iterative) of " + number + " is: " + factorialIterative(number));
        System.out.println("Factorial (Recursive) of " + number + " is: " + factorialRecursive(number));
        
        // Fibonacci computation
        System.out.print("Enter a position to compute the Fibonacci number: ");
        int position = scanner.nextInt();
        
        System.out.println("Fibonacci (Iterative) at position " + position + " is: " + fibonacciIterative(position));
        System.out.println("Fibonacci (Recursive) at position " + position + " is: " + fibonacciRecursive(position));

        scanner.close();
    }
}
